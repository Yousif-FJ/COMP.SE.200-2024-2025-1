{
  "stats": {
    "suites": 11,
    "tests": 87,
    "passes": 69,
    "pending": 0,
    "failures": 18,
    "start": "2024-12-09T01:51:48.070Z",
    "end": "2024-12-09T01:51:48.246Z",
    "duration": 176,
    "testsRegistered": 87,
    "passPercent": 79.3103448275862,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "dfd1e734-42e7-4647-b55d-d0e58272fe0d",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bc69a7dd-ed44-4719-bd48-ac3f1d53836d",
          "title": "add",
          "fullFile": "D:\\Tampere University Studies\\Software Testing COMP.SE.200\\AssignmentRepo\\COMP.SE.200-2024-2025-1\\test\\add.test.js",
          "file": "\\test\\add.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add 2 numbers",
              "fullTitle": "add should add 2 numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(add(2, 3), 5);",
              "err": {},
              "uuid": "9d16950f-acd9-4f6e-87f6-8b35d08f27b4",
              "parentUUID": "bc69a7dd-ed44-4719-bd48-ac3f1d53836d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add negative numbers",
              "fullTitle": "add should add negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(add(-2, -3), -5);",
              "err": {},
              "uuid": "c4ec77bf-0dd6-45b7-b55d-c978e57d6fc8",
              "parentUUID": "bc69a7dd-ed44-4719-bd48-ac3f1d53836d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a positive and a negative number",
              "fullTitle": "add should add a positive and a negative number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(add(2, -3), -1);",
              "err": {},
              "uuid": "7e42d2f3-91e5-404f-9978-259cae85610c",
              "parentUUID": "bc69a7dd-ed44-4719-bd48-ac3f1d53836d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add zero",
              "fullTitle": "add should add zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(add(2, 0), 2);\nassert.equal(add(0, 3), 3);",
              "err": {},
              "uuid": "73c49433-ed65-41cc-ac2f-437849d8f391",
              "parentUUID": "bc69a7dd-ed44-4719-bd48-ac3f1d53836d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add decimal numbers",
              "fullTitle": "add should add decimal numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(add(2.5, 3.1), 5.6);",
              "err": {},
              "uuid": "463b5374-63d1-4711-976d-09a9659af10f",
              "parentUUID": "bc69a7dd-ed44-4719-bd48-ac3f1d53836d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9d16950f-acd9-4f6e-87f6-8b35d08f27b4",
            "c4ec77bf-0dd6-45b7-b55d-c978e57d6fc8",
            "7e42d2f3-91e5-404f-9978-259cae85610c",
            "73c49433-ed65-41cc-ac2f-437849d8f391",
            "463b5374-63d1-4711-976d-09a9659af10f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5d83cfad-910a-41bb-af45-b1a5d51d20b9",
          "title": "at",
          "fullFile": "D:\\Tampere University Studies\\Software Testing COMP.SE.200\\AssignmentRepo\\COMP.SE.200-2024-2025-1\\test\\at.test.js",
          "file": "\\test\\at.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return values at specified paths",
              "fullTitle": "at should return values at specified paths",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\nconst result = at(object, 'a[0].b.c', 'a[1]');\nassert.deepStrictEqual(result, [3, 4]);",
              "err": {},
              "uuid": "131e9a83-0661-4a6f-88f6-92fd49915379",
              "parentUUID": "5d83cfad-910a-41bb-af45-b1a5d51d20b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle non-existent paths",
              "fullTitle": "at should handle non-existent paths",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\nconst result = at(object, 'a[0].b.d', 'a[2]');\nassert.deepStrictEqual(result, [undefined, undefined]);",
              "err": {},
              "uuid": "f1def0ee-5b31-4388-96a3-61022ef3e353",
              "parentUUID": "5d83cfad-910a-41bb-af45-b1a5d51d20b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should work with array of paths",
              "fullTitle": "at should work with array of paths",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\nconst result = at(object, ['a[0].b.c', 'a[1]']);\nassert.deepStrictEqual(result, [3, 4]);",
              "err": {},
              "uuid": "8e500ffe-dc48-40a0-aa50-0c65a6989dee",
              "parentUUID": "5d83cfad-910a-41bb-af45-b1a5d51d20b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return empty array when no paths are provided",
              "fullTitle": "at should return empty array when no paths are provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\nconst result = at(object);\nassert.deepStrictEqual(result, []);",
              "err": {},
              "uuid": "f801b763-de68-430a-ad46-f1d4975307cd",
              "parentUUID": "5d83cfad-910a-41bb-af45-b1a5d51d20b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle null or undefined object",
              "fullTitle": "at should handle null or undefined object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.deepStrictEqual(at(null, 'a.b'), [undefined]);\nassert.deepStrictEqual(at(undefined, 'a.b'), [undefined]);",
              "err": {},
              "uuid": "c5c536ba-8a74-4d0f-a9db-d724c4f12334",
              "parentUUID": "5d83cfad-910a-41bb-af45-b1a5d51d20b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle complex nested paths",
              "fullTitle": "at should handle complex nested paths",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = { a: { b: { c: { d: 42 } } } };\nconst result = at(object, 'a.b.c.d');\nassert.deepStrictEqual(result, [42]);",
              "err": {},
              "uuid": "06dd827e-8640-45de-9998-600e71a7e006",
              "parentUUID": "5d83cfad-910a-41bb-af45-b1a5d51d20b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle multiple paths",
              "fullTitle": "at should handle multiple paths",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = { a: 1, b: 2, c: 3 };\nconst result = at(object, 'a', 'b', 'c');\nassert.deepStrictEqual(result, [1, 2, 3]);",
              "err": {},
              "uuid": "6d7e6056-9b26-43a2-8917-b8642ec6b613",
              "parentUUID": "5d83cfad-910a-41bb-af45-b1a5d51d20b9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "131e9a83-0661-4a6f-88f6-92fd49915379",
            "f1def0ee-5b31-4388-96a3-61022ef3e353",
            "8e500ffe-dc48-40a0-aa50-0c65a6989dee",
            "f801b763-de68-430a-ad46-f1d4975307cd",
            "c5c536ba-8a74-4d0f-a9db-d724c4f12334",
            "06dd827e-8640-45de-9998-600e71a7e006",
            "6d7e6056-9b26-43a2-8917-b8642ec6b613"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "09c6d7f4-e27a-43d9-9afc-5569eaa87cca",
          "title": "ceil",
          "fullFile": "D:\\Tampere University Studies\\Software Testing COMP.SE.200\\AssignmentRepo\\COMP.SE.200-2024-2025-1\\test\\ceil.test.js",
          "file": "\\test\\ceil.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return the smallest integer greater than or equal to a positive number",
              "fullTitle": "ceil should return the smallest integer greater than or equal to a positive number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(ceil(4.2), 5);\nassert.strictEqual(ceil(0.1), 1);\nassert.strictEqual(ceil(5), 5);",
              "err": {},
              "uuid": "4d191976-e470-41f2-95a8-1146edf1fd20",
              "parentUUID": "09c6d7f4-e27a-43d9-9afc-5569eaa87cca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the smallest integer greater than or equal to a negative number",
              "fullTitle": "ceil should return the smallest integer greater than or equal to a negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(ceil(-4.2), -4);\nassert.strictEqual(ceil(-4.8), -4);\nassert.strictEqual(ceil(-5), -5);",
              "err": {},
              "uuid": "f2c9a02c-2106-46e2-9428-d80c8ac489d6",
              "parentUUID": "09c6d7f4-e27a-43d9-9afc-5569eaa87cca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle zero",
              "fullTitle": "ceil should handle zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(ceil(0), 0);",
              "err": {},
              "uuid": "a101a67d-9fd4-469a-abff-2604922d8f4a",
              "parentUUID": "09c6d7f4-e27a-43d9-9afc-5569eaa87cca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle numeric strings",
              "fullTitle": "ceil should handle numeric strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(ceil('4.2'), 5);\nassert.strictEqual(ceil('-4.2'), -4);",
              "err": {},
              "uuid": "2ee9c35c-ce8a-4d24-abc7-7fed93019f39",
              "parentUUID": "09c6d7f4-e27a-43d9-9afc-5569eaa87cca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for invalid inputs",
              "fullTitle": "ceil should return NaN for invalid inputs",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(isNaN(ceil('abc')), true);\nassert.strictEqual(isNaN(ceil(undefined)), true);\nassert.strictEqual(isNaN(ceil(null)), true);",
              "err": {
                "message": "AssertionError: Expected values to be strictly equal:\n\nfalse !== true\n",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n\nfalse !== true\n\n    at Context.<anonymous> (file:///D:/Tampere%20University%20Studies/Software%20Testing%20COMP.SE.200/AssignmentRepo/COMP.SE.200-2024-2025-1/test/ceil.test.js:29:16)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "61930b2e-06ee-42c5-b983-87651449aeb7",
              "parentUUID": "09c6d7f4-e27a-43d9-9afc-5569eaa87cca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle edge cases",
              "fullTitle": "ceil should handle edge cases",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(ceil(Number.MAX_VALUE), Number.MAX_VALUE);\nassert.strictEqual(ceil(Number.MIN_VALUE), 1);",
              "err": {},
              "uuid": "e49c6778-2f5d-4fde-853e-788c0136f554",
              "parentUUID": "09c6d7f4-e27a-43d9-9afc-5569eaa87cca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should round up numbers with positive precision",
              "fullTitle": "ceil should round up numbers with positive precision",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(ceil(4.006, 2), 4.01);\nassert.strictEqual(ceil(0.046, 2), 0.05);\nassert.strictEqual(ceil(1234.5678, 3), 1234.568);",
              "err": {},
              "uuid": "59b1c79f-4963-4485-99a2-a3aa4ba07dc2",
              "parentUUID": "09c6d7f4-e27a-43d9-9afc-5569eaa87cca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should round up numbers with negative precision",
              "fullTitle": "ceil should round up numbers with negative precision",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(ceil(6040, -2), 6100);\nassert.strictEqual(ceil(2500, -3), 3000);\nassert.strictEqual(ceil(12345, -4), 20000);",
              "err": {},
              "uuid": "3b8befb0-cbc0-46f8-877d-92d33ff5c757",
              "parentUUID": "09c6d7f4-e27a-43d9-9afc-5569eaa87cca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle negative numbers with precision",
              "fullTitle": "ceil should handle negative numbers with precision",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(ceil(-4.006, 2), -4);\nassert.strictEqual(ceil(-0.046, 2), -0.04);\nassert.strictEqual(ceil(-1234.5678, 3), -1234.567);",
              "err": {},
              "uuid": "47069baa-821b-4749-8e85-efcf49c22df7",
              "parentUUID": "09c6d7f4-e27a-43d9-9afc-5569eaa87cca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should treat null or undefined precision as zero",
              "fullTitle": "ceil should treat null or undefined precision as zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(ceil(4.006, undefined), 5);\nassert.strictEqual(ceil(4.006, null), 5);",
              "err": {},
              "uuid": "5668a4e3-28a2-4583-aeeb-5e91bc3e8d7c",
              "parentUUID": "09c6d7f4-e27a-43d9-9afc-5569eaa87cca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN when precision is invalid",
              "fullTitle": "ceil should return NaN when precision is invalid",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(isNaN(ceil(4.006, 'a')), true);\nassert.strictEqual(isNaN(ceil(4.006, {})), true);\nassert.strictEqual(isNaN(ceil(4.006, [])), true);",
              "err": {
                "message": "AssertionError: Expected values to be strictly equal:\n\nfalse !== true\n",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n\nfalse !== true\n\n    at Context.<anonymous> (file:///D:/Tampere%20University%20Studies/Software%20Testing%20COMP.SE.200/AssignmentRepo/COMP.SE.200-2024-2025-1/test/ceil.test.js:61:16)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "8ed49eb5-857c-4095-91ff-9b39328c6311",
              "parentUUID": "09c6d7f4-e27a-43d9-9afc-5569eaa87cca",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4d191976-e470-41f2-95a8-1146edf1fd20",
            "f2c9a02c-2106-46e2-9428-d80c8ac489d6",
            "a101a67d-9fd4-469a-abff-2604922d8f4a",
            "2ee9c35c-ce8a-4d24-abc7-7fed93019f39",
            "e49c6778-2f5d-4fde-853e-788c0136f554",
            "59b1c79f-4963-4485-99a2-a3aa4ba07dc2",
            "3b8befb0-cbc0-46f8-877d-92d33ff5c757",
            "47069baa-821b-4749-8e85-efcf49c22df7",
            "5668a4e3-28a2-4583-aeeb-5e91bc3e8d7c"
          ],
          "failures": [
            "61930b2e-06ee-42c5-b983-87651449aeb7",
            "8ed49eb5-857c-4095-91ff-9b39328c6311"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "15a92622-7bda-42bc-abeb-4a60e671bd95",
          "title": "clamp",
          "fullFile": "D:\\Tampere University Studies\\Software Testing COMP.SE.200\\AssignmentRepo\\COMP.SE.200-2024-2025-1\\test\\clamp.test.js",
          "file": "\\test\\clamp.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "425034f9-3e1f-4493-8f6c-afc3e213c141",
              "title": "clamp",
              "fullFile": "D:\\Tampere University Studies\\Software Testing COMP.SE.200\\AssignmentRepo\\COMP.SE.200-2024-2025-1\\test\\clamp.test.js",
              "file": "\\test\\clamp.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should clamp number within lower and upper bounds",
                  "fullTitle": "clamp clamp should clamp number within lower and upper bounds",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(clamp(-10, -5, 5), -5);\nassert.strictEqual(clamp(10, -5, 5), 5);\nassert.strictEqual(clamp(0, -5, 5), 0);",
                  "err": {
                    "message": "AssertionError: Expected values to be strictly equal:\n\n-5 !== 5\n",
                    "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n\n-5 !== 5\n\n    at Context.<anonymous> (file:///D:/Tampere%20University%20Studies/Software%20Testing%20COMP.SE.200/AssignmentRepo/COMP.SE.200-2024-2025-1/test/clamp.test.js:8:20)\n    at process.processImmediate (node:internal/timers:483:21)",
                    "diff": "- -5\n+ 5\n"
                  },
                  "uuid": "ecb469e6-ac3b-4436-a15d-22d1ccffaa28",
                  "parentUUID": "425034f9-3e1f-4493-8f6c-afc3e213c141",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the lower bound when number is less than lower",
                  "fullTitle": "clamp clamp should return the lower bound when number is less than lower",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(clamp(-6, -5, 5), -5);",
                  "err": {},
                  "uuid": "e1250d4b-eb85-4d42-bd4f-5545cea73596",
                  "parentUUID": "425034f9-3e1f-4493-8f6c-afc3e213c141",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the upper bound when number is greater than upper",
                  "fullTitle": "clamp clamp should return the upper bound when number is greater than upper",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(clamp(6, -5, 5), 5);",
                  "err": {
                    "message": "AssertionError: Expected values to be strictly equal:\n\n-5 !== 5\n",
                    "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n\n-5 !== 5\n\n    at Context.<anonymous> (file:///D:/Tampere%20University%20Studies/Software%20Testing%20COMP.SE.200/AssignmentRepo/COMP.SE.200-2024-2025-1/test/clamp.test.js:17:20)\n    at process.processImmediate (node:internal/timers:483:21)",
                    "diff": "- -5\n+ 5\n"
                  },
                  "uuid": "a2996e53-6324-403a-a86b-0f3917309292",
                  "parentUUID": "425034f9-3e1f-4493-8f6c-afc3e213c141",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle lower and upper being NaN",
                  "fullTitle": "clamp clamp should handle lower and upper being NaN",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(clamp(10, NaN, NaN), 0);",
                  "err": {},
                  "uuid": "9fd67782-182b-49bb-a24a-37c0bcdb6e5c",
                  "parentUUID": "425034f9-3e1f-4493-8f6c-afc3e213c141",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should convert inputs to numbers",
                  "fullTitle": "clamp clamp should convert inputs to numbers",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(clamp('10', '-5', '5'), 5);",
                  "err": {
                    "message": "AssertionError: Expected values to be strictly equal:\n\n-5 !== 5\n",
                    "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n\n-5 !== 5\n\n    at Context.<anonymous> (file:///D:/Tampere%20University%20Studies/Software%20Testing%20COMP.SE.200/AssignmentRepo/COMP.SE.200-2024-2025-1/test/clamp.test.js:25:20)\n    at process.processImmediate (node:internal/timers:483:21)",
                    "diff": "- -5\n+ 5\n"
                  },
                  "uuid": "05b488a1-8b8a-4d2c-a36b-57c3a8379183",
                  "parentUUID": "425034f9-3e1f-4493-8f6c-afc3e213c141",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return NaN when number is NaN",
                  "fullTitle": "clamp clamp should return NaN when number is NaN",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(clamp(NaN, -5, 5), NaN);",
                  "err": {},
                  "uuid": "a5a053c3-8d6a-4561-be7b-fdd88a3d9023",
                  "parentUUID": "425034f9-3e1f-4493-8f6c-afc3e213c141",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e1250d4b-eb85-4d42-bd4f-5545cea73596",
                "9fd67782-182b-49bb-a24a-37c0bcdb6e5c",
                "a5a053c3-8d6a-4561-be7b-fdd88a3d9023"
              ],
              "failures": [
                "ecb469e6-ac3b-4436-a15d-22d1ccffaa28",
                "a2996e53-6324-403a-a86b-0f3917309292",
                "05b488a1-8b8a-4d2c-a36b-57c3a8379183"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "18f82fb0-dd41-4fc5-a68d-2faddb349483",
          "title": "countBy",
          "fullFile": "D:\\Tampere University Studies\\Software Testing COMP.SE.200\\AssignmentRepo\\COMP.SE.200-2024-2025-1\\test\\countBy.test.js",
          "file": "\\test\\countBy.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should count numbers by even and odd",
              "fullTitle": "countBy should count numbers by even and odd",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = countBy([1, 2, 3, 4, 5], function(n) {\n    return n % 2 === 0 ? 'even' : 'odd';\n});\nassert.deepStrictEqual(result, { 'odd': 3, 'even': 2 });",
              "err": {
                "message": "AssertionError: Expected values to be strictly deep-equal:\n+ actual - expected\n\n  {\n+   even: 1,\n+   odd: 2\n-   even: 2,\n-   odd: 3\n  }",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly deep-equal:\n+ actual - expected\n\n  {\n+   even: 1,\n+   odd: 2\n-   even: 2,\n-   odd: 3\n  }\n    at Context.<anonymous> (file:///D:/Tampere%20University%20Studies/Software%20Testing%20COMP.SE.200/AssignmentRepo/COMP.SE.200-2024-2025-1/test/countBy.test.js:9:16)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": " {\n-   \"even\": 1\n-   \"odd\": 2\n+   \"even\": 2\n+   \"odd\": 3\n }\n"
              },
              "uuid": "06111534-c419-407c-9077-2979878b491b",
              "parentUUID": "18f82fb0-dd41-4fc5-a68d-2faddb349483",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should count objects by a property value",
              "fullTitle": "countBy should count objects by a property value",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const users = [\n    { 'user': 'barney', 'active': true },\n    { 'user': 'betty', 'active': true },\n    { 'user': 'fred', 'active': false }\n];\nconst result = countBy(users, function(value) {\n    return value.active;\n});\nassert.deepStrictEqual(result, { 'true': 2, 'false': 1 });",
              "err": {
                "message": "AssertionError: Expected values to be strictly deep-equal:\n+ actual - expected\n\n  {\n+   false: 0,\n+   true: 1\n-   false: 1,\n-   true: 2\n  }",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly deep-equal:\n+ actual - expected\n\n  {\n+   false: 0,\n+   true: 1\n-   false: 1,\n-   true: 2\n  }\n    at Context.<anonymous> (file:///D:/Tampere%20University%20Studies/Software%20Testing%20COMP.SE.200/AssignmentRepo/COMP.SE.200-2024-2025-1/test/countBy.test.js:21:16)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": " {\n-   \"false\": 0\n-   \"true\": 1\n+   \"false\": 1\n+   \"true\": 2\n }\n"
              },
              "uuid": "3f020532-c7fc-4a22-ad63-dcd9cc993bd1",
              "parentUUID": "18f82fb0-dd41-4fc5-a68d-2faddb349483",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty object when collection is empty",
              "fullTitle": "countBy should return an empty object when collection is empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = countBy([], function(value) {\n    return value;\n});\nassert.deepStrictEqual(result, {});",
              "err": {},
              "uuid": "0decd2e6-f04b-42e4-b9ae-242a0bca4add",
              "parentUUID": "18f82fb0-dd41-4fc5-a68d-2faddb349483",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle iteratee returning undefined or null",
              "fullTitle": "countBy should handle iteratee returning undefined or null",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const collection = [null, undefined, null];\nconst result = countBy(collection, function(value) {\n    return value;\n});\nassert.deepStrictEqual(result, { 'null': 2, 'undefined': 1 });",
              "err": {
                "message": "AssertionError: Expected values to be strictly deep-equal:\n+ actual - expected\n\n  {\n+   null: 1,\n+   undefined: 0\n-   null: 2,\n-   undefined: 1\n  }",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly deep-equal:\n+ actual - expected\n\n  {\n+   null: 1,\n+   undefined: 0\n-   null: 2,\n-   undefined: 1\n  }\n    at Context.<anonymous> (file:///D:/Tampere%20University%20Studies/Software%20Testing%20COMP.SE.200/AssignmentRepo/COMP.SE.200-2024-2025-1/test/countBy.test.js:36:16)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": " {\n-   \"null\": 1\n-   \"undefined\": 0\n+   \"null\": 2\n+   \"undefined\": 1\n }\n"
              },
              "uuid": "ec458664-bce2-42a8-b8e0-12f0f725e05d",
              "parentUUID": "18f82fb0-dd41-4fc5-a68d-2faddb349483",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should count items by floor value",
              "fullTitle": "countBy should count items by floor value",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = countBy([1.1, 2.2, 3.3, 2.2], Math.floor);\nassert.deepStrictEqual(result, { '1': 1, '2': 2, '3': 1 });",
              "err": {
                "message": "AssertionError: Expected values to be strictly deep-equal:\n+ actual - expected\n\n  {\n+   '1': 0,\n+   '2': 1,\n+   '3': 0\n-   '1': 1,\n-   '2': 2,\n-   '3': 1\n  }",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly deep-equal:\n+ actual - expected\n\n  {\n+   '1': 0,\n+   '2': 1,\n+   '3': 0\n-   '1': 1,\n-   '2': 2,\n-   '3': 1\n  }\n    at Context.<anonymous> (file:///D:/Tampere%20University%20Studies/Software%20Testing%20COMP.SE.200/AssignmentRepo/COMP.SE.200-2024-2025-1/test/countBy.test.js:41:16)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": " {\n-   \"1\": 0\n-   \"2\": 1\n-   \"3\": 0\n+   \"1\": 1\n+   \"2\": 2\n+   \"3\": 1\n }\n"
              },
              "uuid": "a2b86fbf-e1bd-4e9c-b9f8-7b9054ea801d",
              "parentUUID": "18f82fb0-dd41-4fc5-a68d-2faddb349483",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0decd2e6-f04b-42e4-b9ae-242a0bca4add"
          ],
          "failures": [
            "06111534-c419-407c-9077-2979878b491b",
            "3f020532-c7fc-4a22-ad63-dcd9cc993bd1",
            "ec458664-bce2-42a8-b8e0-12f0f725e05d",
            "a2b86fbf-e1bd-4e9c-b9f8-7b9054ea801d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "000758ce-d846-4d6c-95ce-2a9f7f3ff2b4",
          "title": "endsWith",
          "fullFile": "D:\\Tampere University Studies\\Software Testing COMP.SE.200\\AssignmentRepo\\COMP.SE.200-2024-2025-1\\test\\endsWith.test.js",
          "file": "\\test\\endsWith.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return true when checking (HelloWorld) ends with (World)",
              "fullTitle": "endsWith should return true when checking (HelloWorld) ends with (World)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(endsWith(\"HelloWorld\", \"World\"), true);",
              "err": {},
              "uuid": "687c8236-edf5-4c1a-9532-492fddb2e373",
              "parentUUID": "000758ce-d846-4d6c-95ce-2a9f7f3ff2b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when checking (HelloWorld) ends with (Hello) til the 5th position",
              "fullTitle": "endsWith should return true when checking (HelloWorld) ends with (Hello) til the 5th position",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.equal(endsWith(\"HelloWorld\", \"Hello\", 5), false);",
              "err": {
                "message": "AssertionError: true == false",
                "estack": "AssertionError [ERR_ASSERTION]: true == false\n    at Context.<anonymous> (file:///D:/Tampere%20University%20Studies/Software%20Testing%20COMP.SE.200/AssignmentRepo/COMP.SE.200-2024-2025-1/test/endsWith.test.js:10:16)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- true\n+ false\n"
              },
              "uuid": "f4f1e2ee-b54b-4bf2-9389-4882efd60fbe",
              "parentUUID": "000758ce-d846-4d6c-95ce-2a9f7f3ff2b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when checking empty string ends with empty string",
              "fullTitle": "endsWith should return true when checking empty string ends with empty string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(endsWith(\"\", \"\"), true);",
              "err": {},
              "uuid": "d2094b47-e532-4813-a4d9-b7223ab6aba0",
              "parentUUID": "000758ce-d846-4d6c-95ce-2a9f7f3ff2b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when checking (HelloWorld) ends with empty string",
              "fullTitle": "endsWith should return true when checking (HelloWorld) ends with empty string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(endsWith(\"HelloWorld\", \"\"), true);",
              "err": {},
              "uuid": "c48c90e2-7318-4bac-874c-a5ce7d68389c",
              "parentUUID": "000758ce-d846-4d6c-95ce-2a9f7f3ff2b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when checking empty string ends with (HelloWorld)",
              "fullTitle": "endsWith should return false when checking empty string ends with (HelloWorld)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(endsWith(\"\", \"HelloWorld\"), false);",
              "err": {},
              "uuid": "90fe08c4-56bf-4f18-a25c-4320fe04d691",
              "parentUUID": "000758ce-d846-4d6c-95ce-2a9f7f3ff2b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when checking (HelloWorld) ends with empty string til the 100th position",
              "fullTitle": "endsWith should return true when checking (HelloWorld) ends with empty string til the 100th position",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(endsWith(\"HelloWorld\", \"\", 100), true);",
              "err": {},
              "uuid": "2d481cd1-5403-4b7b-a0aa-6337ca803b10",
              "parentUUID": "000758ce-d846-4d6c-95ce-2a9f7f3ff2b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when checking (HelloWorld) ends with (Worl)",
              "fullTitle": "endsWith should return false when checking (HelloWorld) ends with (Worl)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(endsWith(\"HelloWorld\", \"Worl\", ), false);",
              "err": {},
              "uuid": "e901a2ec-1401-4cc0-b424-10425892979a",
              "parentUUID": "000758ce-d846-4d6c-95ce-2a9f7f3ff2b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when checking (HelloWorld) ends with (World) til the 5th position",
              "fullTitle": "endsWith should return false when checking (HelloWorld) ends with (World) til the 5th position",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(endsWith(\"HelloWorld\", \"World\", 5), false);",
              "err": {},
              "uuid": "a66c19e9-3f3f-4cd5-bf6c-0b0bbfc9a15f",
              "parentUUID": "000758ce-d846-4d6c-95ce-2a9f7f3ff2b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw error when checking (HelloWorld) ends with (Hello) til the -5th position",
              "fullTitle": "endsWith should throw error when checking (HelloWorld) ends with (Hello) til the -5th position",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// assumption made that this method should not return false in this case ?\n// assert.equal(endsWith(\"HelloWorld\", \"Hello\", -5), false);\nassert.throws(() => endsWith(\"HelloWorld\", \"World\", -5), Error, \"Position cannot be negative\");",
              "err": {
                "message": "AssertionError: Missing expected exception (Error): Position cannot be negative",
                "estack": "AssertionError [ERR_ASSERTION]: Missing expected exception (Error): Position cannot be negative\n    at Context.<anonymous> (file:///D:/Tampere%20University%20Studies/Software%20Testing%20COMP.SE.200/AssignmentRepo/COMP.SE.200-2024-2025-1/test/endsWith.test.js:41:16)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": null
              },
              "uuid": "d78e2b18-b241-408d-9424-61051739409a",
              "parentUUID": "000758ce-d846-4d6c-95ce-2a9f7f3ff2b4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "687c8236-edf5-4c1a-9532-492fddb2e373",
            "d2094b47-e532-4813-a4d9-b7223ab6aba0",
            "c48c90e2-7318-4bac-874c-a5ce7d68389c",
            "90fe08c4-56bf-4f18-a25c-4320fe04d691",
            "2d481cd1-5403-4b7b-a0aa-6337ca803b10",
            "e901a2ec-1401-4cc0-b424-10425892979a",
            "a66c19e9-3f3f-4cd5-bf6c-0b0bbfc9a15f"
          ],
          "failures": [
            "f4f1e2ee-b54b-4bf2-9389-4882efd60fbe",
            "d78e2b18-b241-408d-9424-61051739409a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4b77528c-54a4-4f76-9b93-cba5094557c1",
          "title": "eq",
          "fullFile": "D:\\Tampere University Studies\\Software Testing COMP.SE.200\\AssignmentRepo\\COMP.SE.200-2024-2025-1\\test\\eq.test.js",
          "file": "\\test\\eq.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return true when checking \"hi\" equals \"hi\"",
              "fullTitle": "eq should return true when checking \"hi\" equals \"hi\"",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(eq(\"hi\", \"hi\"), true);",
              "err": {},
              "uuid": "923d5a99-c093-4388-834c-dd69693c580e",
              "parentUUID": "4b77528c-54a4-4f76-9b93-cba5094557c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when checking \"hi\" equals \"bye\"",
              "fullTitle": "eq should return false when checking \"hi\" equals \"bye\"",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(eq(\"hi\", \"bye\"), false);",
              "err": {},
              "uuid": "12667915-fcd6-4050-b885-549143468a6a",
              "parentUUID": "4b77528c-54a4-4f76-9b93-cba5094557c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when checking 'c' equals 'c'",
              "fullTitle": "eq should return true when checking 'c' equals 'c'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(eq('c', 'c'), true);",
              "err": {},
              "uuid": "e5305ad7-7754-46bd-b036-d3f455666a3d",
              "parentUUID": "4b77528c-54a4-4f76-9b93-cba5094557c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when checking 'c' equals 'd'",
              "fullTitle": "eq should return false when checking 'c' equals 'd'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(eq('c', 'd'), false);",
              "err": {},
              "uuid": "590b7833-a978-4114-a06f-ca52bbd7c3c0",
              "parentUUID": "4b77528c-54a4-4f76-9b93-cba5094557c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when checking 786 equals 786",
              "fullTitle": "eq should return true when checking 786 equals 786",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(eq(786, 786), true);",
              "err": {},
              "uuid": "9128f516-5def-465b-9946-c0ab755ba1c8",
              "parentUUID": "4b77528c-54a4-4f76-9b93-cba5094557c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when checking 786 equals 787",
              "fullTitle": "eq should return false when checking 786 equals 787",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(eq(786, 787), false);",
              "err": {},
              "uuid": "3bd6ed71-4cec-41d4-be08-f52250923f72",
              "parentUUID": "4b77528c-54a4-4f76-9b93-cba5094557c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when checking NaN equals NaN",
              "fullTitle": "eq should return true when checking NaN equals NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(eq(NaN, NaN), true);",
              "err": {},
              "uuid": "11f69a76-f9bc-45ec-8cf3-a9e9202adadf",
              "parentUUID": "4b77528c-54a4-4f76-9b93-cba5094557c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when checking NaN equals NaN",
              "fullTitle": "eq should return false when checking NaN equals NaN",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(eq(NaN, null), false);",
              "err": {},
              "uuid": "48d345bb-b5cf-4bde-8464-e78f75a4d235",
              "parentUUID": "4b77528c-54a4-4f76-9b93-cba5094557c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when checking null equals null",
              "fullTitle": "eq should return true when checking null equals null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(eq(null, null), true);",
              "err": {},
              "uuid": "c2eb0017-7c3e-4aa6-a4ed-67754565c805",
              "parentUUID": "4b77528c-54a4-4f76-9b93-cba5094557c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when checking null equals undefined",
              "fullTitle": "eq should return true when checking null equals undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(eq(null, undefined), true);",
              "err": {},
              "uuid": "e52aaa6c-c4a6-4a66-b4b3-a47eb0acd6a8",
              "parentUUID": "4b77528c-54a4-4f76-9b93-cba5094557c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when checking object {a: 1} equals object {a: 1}",
              "fullTitle": "eq should return true when checking object {a: 1} equals object {a: 1}",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.equal(eq({ 'a': 1 }, { 'a': 1 }), true);",
              "err": {
                "message": "AssertionError: false == true",
                "estack": "AssertionError [ERR_ASSERTION]: false == true\n    at Context.<anonymous> (file:///D:/Tampere%20University%20Studies/Software%20Testing%20COMP.SE.200/AssignmentRepo/COMP.SE.200-2024-2025-1/test/eq.test.js:46:16)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "1b056dc2-ed3e-425d-92ec-deea32eddca7",
              "parentUUID": "4b77528c-54a4-4f76-9b93-cba5094557c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when checking object {a: 1} equals object {a: 2}",
              "fullTitle": "eq should return false when checking object {a: 1} equals object {a: 2}",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(eq({ 'a': 1 }, { 'a': 2 }), false);",
              "err": {},
              "uuid": "7311d7e0-e88e-462d-a9ab-c9339f0e4237",
              "parentUUID": "4b77528c-54a4-4f76-9b93-cba5094557c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when checking object {a: 1} equals object {a: 2}",
              "fullTitle": "eq should return false when checking object {a: 1} equals object {a: 2}",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(eq({ 'a': 1 }, { 'a': 2 }), false);",
              "err": {},
              "uuid": "57843acf-605f-4313-9c57-c61cebeffff5",
              "parentUUID": "4b77528c-54a4-4f76-9b93-cba5094557c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when checking \"a\" equals Object(\"a\")",
              "fullTitle": "eq should return false when checking \"a\" equals Object(\"a\")",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.equal(eq('a', Object('a')), false);",
              "err": {
                "message": "AssertionError: true == false",
                "estack": "AssertionError [ERR_ASSERTION]: true == false\n    at Context.<anonymous> (file:///D:/Tampere%20University%20Studies/Software%20Testing%20COMP.SE.200/AssignmentRepo/COMP.SE.200-2024-2025-1/test/eq.test.js:58:16)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- true\n+ false\n"
              },
              "uuid": "8bd01edc-3862-47bb-98b4-00022fcc3ee5",
              "parentUUID": "4b77528c-54a4-4f76-9b93-cba5094557c1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "923d5a99-c093-4388-834c-dd69693c580e",
            "12667915-fcd6-4050-b885-549143468a6a",
            "e5305ad7-7754-46bd-b036-d3f455666a3d",
            "590b7833-a978-4114-a06f-ca52bbd7c3c0",
            "9128f516-5def-465b-9946-c0ab755ba1c8",
            "3bd6ed71-4cec-41d4-be08-f52250923f72",
            "11f69a76-f9bc-45ec-8cf3-a9e9202adadf",
            "48d345bb-b5cf-4bde-8464-e78f75a4d235",
            "c2eb0017-7c3e-4aa6-a4ed-67754565c805",
            "e52aaa6c-c4a6-4a66-b4b3-a47eb0acd6a8",
            "7311d7e0-e88e-462d-a9ab-c9339f0e4237",
            "57843acf-605f-4313-9c57-c61cebeffff5"
          ],
          "failures": [
            "1b056dc2-ed3e-425d-92ec-deea32eddca7",
            "8bd01edc-3862-47bb-98b4-00022fcc3ee5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e866c66b-c3bc-43ab-a546-04ff0fe226ee",
          "title": "filter",
          "fullFile": "D:\\Tampere University Studies\\Software Testing COMP.SE.200\\AssignmentRepo\\COMP.SE.200-2024-2025-1\\test\\filter.test.js",
          "file": "\\test\\filter.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return an empty array when the input array is empty",
              "fullTitle": "filter should return an empty array when the input array is empty",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.deepEqual(filter([], () => true), []);",
              "err": {
                "message": "AssertionError: Expected values to be loosely deep-equal:\n\n[\n  []\n]\n\nshould loosely deep-equal\n\n[]",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  []\n]\n\nshould loosely deep-equal\n\n[]\n    at Context.<anonymous> (file:///D:/Tampere%20University%20Studies/Software%20Testing%20COMP.SE.200/AssignmentRepo/COMP.SE.200-2024-2025-1/test/filter.test.js:6:16)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- [\n-   []\n- ]\n+ []\n"
              },
              "uuid": "c1675fd2-3c60-4123-8203-244535d776bf",
              "parentUUID": "e866c66b-c3bc-43ab-a546-04ff0fe226ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return all elements that match the predicate",
              "fullTitle": "filter should return all elements that match the predicate",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const users = [\n    { 'user': 'barney', 'active': true },\n    { 'user': 'fred', 'active': false }\n];\nassert.deepEqual(filter(users, ({ active }) => active), [{ 'user': 'barney', 'active': true }]);",
              "err": {},
              "uuid": "c4559a09-0553-4aa5-986a-fc1fb70c6cd8",
              "parentUUID": "e866c66b-c3bc-43ab-a546-04ff0fe226ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return elements for which the predicate returns true",
              "fullTitle": "filter should return elements for which the predicate returns true",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const numbers = [1, 2, 3, 4, 5];\nassert.deepEqual(filter(numbers, n => n % 2 === 0), [2, 4]);",
              "err": {},
              "uuid": "ecc8a593-0c27-4e42-9165-92b1b1de0785",
              "parentUUID": "e866c66b-c3bc-43ab-a546-04ff0fe226ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle arrays with mixed data types",
              "fullTitle": "filter should handle arrays with mixed data types",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data = [\n    { 'id': 1, 'value': 'a' },\n    { 'id': 2, 'value': 'b' },\n    { 'id': 3, 'value': 'a' }\n];\nassert.deepEqual(filter(data, ({ value }) => value === 'a'), [\n    { 'id': 1, 'value': 'a' },\n    { 'id': 3, 'value': 'a' }\n]);",
              "err": {},
              "uuid": "5a7971be-f20f-4bda-9a1f-2ac7a9f5594a",
              "parentUUID": "e866c66b-c3bc-43ab-a546-04ff0fe226ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when no elements match the predicate",
              "fullTitle": "filter should return an empty array when no elements match the predicate",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const numbers = [1, 2, 3, 4, 5];\nassert.deepEqual(filter(numbers, n => n > 5), []);",
              "err": {
                "message": "AssertionError: Expected values to be loosely deep-equal:\n\n[\n  []\n]\n\nshould loosely deep-equal\n\n[]",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  []\n]\n\nshould loosely deep-equal\n\n[]\n    at Context.<anonymous> (file:///D:/Tampere%20University%20Studies/Software%20Testing%20COMP.SE.200/AssignmentRepo/COMP.SE.200-2024-2025-1/test/filter.test.js:36:16)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- [\n-   []\n- ]\n+ []\n"
              },
              "uuid": "e1b03017-b1c2-4c1d-84bb-0878afba4628",
              "parentUUID": "e866c66b-c3bc-43ab-a546-04ff0fe226ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should pass the index and array as arguments to the predicate",
              "fullTitle": "filter should pass the index and array as arguments to the predicate",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const numbers = [10, 20, 30];\nconst results = filter(numbers, (value, index) => value > index);\nassert.deepEqual(results, [20, 30]);",
              "err": {
                "message": "AssertionError: Expected values to be loosely deep-equal:\n\n[\n  10,\n  20,\n  30\n]\n\nshould loosely deep-equal\n\n[\n  20,\n  30\n]",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10,\n  20,\n  30\n]\n\nshould loosely deep-equal\n\n[\n  20,\n  30\n]\n    at Context.<anonymous> (file:///D:/Tampere%20University%20Studies/Software%20Testing%20COMP.SE.200/AssignmentRepo/COMP.SE.200-2024-2025-1/test/filter.test.js:42:16)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": " [\n-   10\n   20\n   30\n ]\n"
              },
              "uuid": "2f69893d-cb07-46f6-a9d4-f21a9fda9d6d",
              "parentUUID": "e866c66b-c3bc-43ab-a546-04ff0fe226ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a new array and not modify the original",
              "fullTitle": "filter should return a new array and not modify the original",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const numbers = [1, 2, 3];\nconst filtered = filter(numbers, n => n > 1);\nassert.notDeepEqual(filtered, numbers); // The new array should be different from the original",
              "err": {},
              "uuid": "233e7e7d-4792-4fbf-81ea-ea410717ddf7",
              "parentUUID": "e866c66b-c3bc-43ab-a546-04ff0fe226ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return empty array if predicate returns false for all elements",
              "fullTitle": "filter should return empty array if predicate returns false for all elements",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const numbers = [1, 2, 3];\nassert.deepEqual(filter(numbers, n => false), []);",
              "err": {
                "message": "AssertionError: Expected values to be loosely deep-equal:\n\n[\n  []\n]\n\nshould loosely deep-equal\n\n[]",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  []\n]\n\nshould loosely deep-equal\n\n[]\n    at Context.<anonymous> (file:///D:/Tampere%20University%20Studies/Software%20Testing%20COMP.SE.200/AssignmentRepo/COMP.SE.200-2024-2025-1/test/filter.test.js:53:16)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- [\n-   []\n- ]\n+ []\n"
              },
              "uuid": "a5d5ccc1-c1f1-452b-afc1-0e58b3912e98",
              "parentUUID": "e866c66b-c3bc-43ab-a546-04ff0fe226ee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c4559a09-0553-4aa5-986a-fc1fb70c6cd8",
            "ecc8a593-0c27-4e42-9165-92b1b1de0785",
            "5a7971be-f20f-4bda-9a1f-2ac7a9f5594a",
            "233e7e7d-4792-4fbf-81ea-ea410717ddf7"
          ],
          "failures": [
            "c1675fd2-3c60-4123-8203-244535d776bf",
            "e1b03017-b1c2-4c1d-84bb-0878afba4628",
            "2f69893d-cb07-46f6-a9d4-f21a9fda9d6d",
            "a5d5ccc1-c1f1-452b-afc1-0e58b3912e98"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ba525fa5-be80-4b65-96cd-175308049d44",
          "title": "isEmpty",
          "fullFile": "D:\\Tampere University Studies\\Software Testing COMP.SE.200\\AssignmentRepo\\COMP.SE.200-2024-2025-1\\test\\isEmpty.test.js",
          "file": "\\test\\isEmpty.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return true for null",
              "fullTitle": "isEmpty should return true for null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(isEmpty(null), true);",
              "err": {},
              "uuid": "8873e38b-6812-4d07-9bdc-ed343ad524c9",
              "parentUUID": "ba525fa5-be80-4b65-96cd-175308049d44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for boolean values",
              "fullTitle": "isEmpty should return true for boolean values",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(isEmpty(true), true);\nassert.strictEqual(isEmpty(false), true);",
              "err": {},
              "uuid": "15d9f415-d5f6-468b-9fef-a17da7b2e103",
              "parentUUID": "ba525fa5-be80-4b65-96cd-175308049d44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for numbers",
              "fullTitle": "isEmpty should return true for numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(isEmpty(0), true);\nassert.strictEqual(isEmpty(1), true);",
              "err": {},
              "uuid": "0f2666d6-0428-4a9d-a38b-2a0239f68586",
              "parentUUID": "ba525fa5-be80-4b65-96cd-175308049d44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for non-empty arrays",
              "fullTitle": "isEmpty should return false for non-empty arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(isEmpty([1, 2, 3]), false);",
              "err": {},
              "uuid": "da1191c8-b22d-4820-bf14-817333f32202",
              "parentUUID": "ba525fa5-be80-4b65-96cd-175308049d44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for non-empty strings",
              "fullTitle": "isEmpty should return false for non-empty strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(isEmpty('abc'), false);",
              "err": {},
              "uuid": "7abc63d7-5da1-4b3e-981b-c376699d6509",
              "parentUUID": "ba525fa5-be80-4b65-96cd-175308049d44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for objects with properties",
              "fullTitle": "isEmpty should return false for objects with properties",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(isEmpty({ 'a': 1 }), false);",
              "err": {},
              "uuid": "84fef17e-3f45-46c1-93ff-65c79f3e70d2",
              "parentUUID": "ba525fa5-be80-4b65-96cd-175308049d44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for non-empty maps",
              "fullTitle": "isEmpty should return false for non-empty maps",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const map = new Map([['key', 'value']]);\nassert.strictEqual(isEmpty(map), false);",
              "err": {},
              "uuid": "3b6eb872-eda1-40bc-a9ec-f86965027a92",
              "parentUUID": "ba525fa5-be80-4b65-96cd-175308049d44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for non-empty sets",
              "fullTitle": "isEmpty should return false for non-empty sets",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const set = new Set([1, 2, 3]);\nassert.strictEqual(isEmpty(set), false);",
              "err": {},
              "uuid": "83d7e159-fcb6-4fdf-a0f0-e8725121b4c5",
              "parentUUID": "ba525fa5-be80-4b65-96cd-175308049d44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for objects with no own properties",
              "fullTitle": "isEmpty should return true for objects with no own properties",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = Object.create(null);\nassert.strictEqual(isEmpty(obj), true);",
              "err": {},
              "uuid": "b5805090-7d51-4eab-90ab-cbb322df1598",
              "parentUUID": "ba525fa5-be80-4b65-96cd-175308049d44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for objects with own properties",
              "fullTitle": "isEmpty should return false for objects with own properties",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = Object.create(null);\nobj['key'] = 'value';\nassert.strictEqual(isEmpty(obj), false);",
              "err": {},
              "uuid": "0513f74d-f5f5-4dad-9f8a-251d633a5523",
              "parentUUID": "ba525fa5-be80-4b65-96cd-175308049d44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for objects with inherited properties but no own properties",
              "fullTitle": "isEmpty should return true for objects with inherited properties but no own properties",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "function Parent() {\n    this.inheritedProperty = 'value';\n}\nconst child = new Parent();\nassert.strictEqual(isEmpty(child), true);",
              "err": {
                "message": "AssertionError: Expected values to be strictly equal:\n\nfalse !== true\n",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n\nfalse !== true\n\n    at Context.<anonymous> (file:///D:/Tampere%20University%20Studies/Software%20Testing%20COMP.SE.200/AssignmentRepo/COMP.SE.200-2024-2025-1/test/isEmpty.test.js:57:16)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "1d24dce7-1c63-4eab-a702-c51f329fa926",
              "parentUUID": "ba525fa5-be80-4b65-96cd-175308049d44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for objects with own properties and inherited ones",
              "fullTitle": "isEmpty should return false for objects with own properties and inherited ones",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "function Parent() {\n    this.inheritedProperty = 'value';\n}\nconst child = new Parent();\nchild.ownProperty = 'own';\nassert.strictEqual(isEmpty(child), false);",
              "err": {},
              "uuid": "319bdb9a-d9cf-459b-9bd8-22d259a5a0c6",
              "parentUUID": "ba525fa5-be80-4b65-96cd-175308049d44",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8873e38b-6812-4d07-9bdc-ed343ad524c9",
            "15d9f415-d5f6-468b-9fef-a17da7b2e103",
            "0f2666d6-0428-4a9d-a38b-2a0239f68586",
            "da1191c8-b22d-4820-bf14-817333f32202",
            "7abc63d7-5da1-4b3e-981b-c376699d6509",
            "84fef17e-3f45-46c1-93ff-65c79f3e70d2",
            "3b6eb872-eda1-40bc-a9ec-f86965027a92",
            "83d7e159-fcb6-4fdf-a0f0-e8725121b4c5",
            "b5805090-7d51-4eab-90ab-cbb322df1598",
            "0513f74d-f5f5-4dad-9f8a-251d633a5523",
            "319bdb9a-d9cf-459b-9bd8-22d259a5a0c6"
          ],
          "failures": [
            "1d24dce7-1c63-4eab-a702-c51f329fa926"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a426cacd-b82a-447f-afd0-31b97f43b7ca",
          "title": "isObject",
          "fullFile": "D:\\Tampere University Studies\\Software Testing COMP.SE.200\\AssignmentRepo\\COMP.SE.200-2024-2025-1\\test\\isObject.test.js",
          "file": "\\test\\isObject.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return true for objects",
              "fullTitle": "isObject should return true for objects",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(isObject({}), true);",
              "err": {},
              "uuid": "88363807-2989-4269-8fb6-5aebd0ed663c",
              "parentUUID": "a426cacd-b82a-447f-afd0-31b97f43b7ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for arrays",
              "fullTitle": "isObject should return true for arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(isObject([1, 2, 3]), true);",
              "err": {},
              "uuid": "01ed0dcb-6088-4647-b4e5-a76f4b0439ec",
              "parentUUID": "a426cacd-b82a-447f-afd0-31b97f43b7ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for functions",
              "fullTitle": "isObject should return true for functions",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(isObject(function() {}), true);",
              "err": {},
              "uuid": "cf9d517c-048f-49d9-bec8-f38219f77a59",
              "parentUUID": "a426cacd-b82a-447f-afd0-31b97f43b7ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for regexes",
              "fullTitle": "isObject should return true for regexes",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(isObject(/abc/), true);",
              "err": {},
              "uuid": "5010b4a5-3c48-447e-8ada-91eef0c5513a",
              "parentUUID": "a426cacd-b82a-447f-afd0-31b97f43b7ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for new Number(0)",
              "fullTitle": "isObject should return true for new Number(0)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(isObject(new Number(0)), true);",
              "err": {},
              "uuid": "93d6dfa8-60c7-46e2-b26d-704c44a060bc",
              "parentUUID": "a426cacd-b82a-447f-afd0-31b97f43b7ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for new String('')",
              "fullTitle": "isObject should return true for new String('')",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(isObject(new String('')), true);",
              "err": {},
              "uuid": "750c0469-9e96-4b9e-b6a6-8aad8a9e3dc7",
              "parentUUID": "a426cacd-b82a-447f-afd0-31b97f43b7ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for null",
              "fullTitle": "isObject should return false for null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(isObject(null), false);",
              "err": {},
              "uuid": "7a3ce95b-b65c-48c6-9fe6-d530dae9c9c2",
              "parentUUID": "a426cacd-b82a-447f-afd0-31b97f43b7ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for undefined",
              "fullTitle": "isObject should return false for undefined",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(isObject(undefined), false);",
              "err": {},
              "uuid": "70a1af7c-a43d-46c1-b616-2bef11f2f6f5",
              "parentUUID": "a426cacd-b82a-447f-afd0-31b97f43b7ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for primitives",
              "fullTitle": "isObject should return false for primitives",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(isObject(1), false);\nassert.strictEqual(isObject('string'), false);\nassert.strictEqual(isObject(true), false);",
              "err": {},
              "uuid": "9d962bf1-5cb2-453f-93f9-0487cac9f519",
              "parentUUID": "a426cacd-b82a-447f-afd0-31b97f43b7ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for symbols",
              "fullTitle": "isObject should return false for symbols",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(isObject(Symbol('symbol')), false);",
              "err": {},
              "uuid": "29492670-0269-404c-85d3-beceba3ea8ec",
              "parentUUID": "a426cacd-b82a-447f-afd0-31b97f43b7ca",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "88363807-2989-4269-8fb6-5aebd0ed663c",
            "01ed0dcb-6088-4647-b4e5-a76f4b0439ec",
            "cf9d517c-048f-49d9-bec8-f38219f77a59",
            "5010b4a5-3c48-447e-8ada-91eef0c5513a",
            "93d6dfa8-60c7-46e2-b26d-704c44a060bc",
            "750c0469-9e96-4b9e-b6a6-8aad8a9e3dc7",
            "7a3ce95b-b65c-48c6-9fe6-d530dae9c9c2",
            "70a1af7c-a43d-46c1-b616-2bef11f2f6f5",
            "9d962bf1-5cb2-453f-93f9-0487cac9f519",
            "29492670-0269-404c-85d3-beceba3ea8ec"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}